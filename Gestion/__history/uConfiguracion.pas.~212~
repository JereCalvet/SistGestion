unit uConfiguracion;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uPlantillaGenerica, Vcl.ExtCtrls,
  Vcl.WinXCtrls, System.Actions, Vcl.ActnList, System.ImageList, Vcl.ImgList,
  Vcl.CategoryButtons, Vcl.Imaging.pngimage, Vcl.StdCtrls, Vcl.ComCtrls,
  Vcl.Grids, Vcl.Themes, Vcl.Samples.Spin, Vcl.FileCtrl, Data.DB, Vcl.DBCtrls, System.IniFiles, System.IOUtils;

type
  TfrmConfiguracion = class(TfrmPlantillaGenerica)
    pnlApariencia: TPanel;
    lblVclStyle: TLabel;
    pnlToolbar: TPanel;
    imgMenu: TImage;
    lblTitulo: TLabel;
    SV: TSplitView;
    catMenuItems: TCategoryButtons;
    actlst1: TActionList;
    ilMenu: TImageList;
    actApariencia: TAction;
    actCopiaSeg: TAction;
    actFact: TAction;
    btnAceptarApaciencia: TButton;
    btnCancelarApaciencia: TButton;
    actImp: TAction;
    grpApariencia: TGroupBox;
    lbl1: TLabel;
    strngrdMuestra: TStringGrid;
    chkMuestra1: TCheckBox;
    chkMuestra2: TCheckBox;
    edt1: TEdit;
    rbMuestra1: TRadioButton;
    rbMuestra2: TRadioButton;
    cbbMuestra: TComboBox;
    btnMuestra2: TButton;
    btnMuestra1: TButton;
    pnlCopiaSeg: TPanel;
    btnAceptarCopiaSeg: TButton;
    btnCancelarCopiaSeg: TButton;
    grpCopiaSeg: TGroupBox;
    chkAutmatica: TCheckBox;
    seDias: TSpinEdit;
    lblCopiaSeg: TLabel;
    edtPath: TEdit;
    lblDias: TLabel;
    btnPath: TButton;
    pnlImpre: TPanel;
    btnAceptarImpre: TButton;
    btnCancelarImpre: TButton;
    grpImpre: TGroupBox;
    pnlFact: TPanel;
    btnAceptarFact: TButton;
    btnCancelarFact: TButton;
    grpFact: TGroupBox;
    dsSucursales: TDataSource;
    lblSucursal: TLabel;
    dblkcbbSucursal: TDBLookupComboBox;
    cbbApariencia: TComboBox;
    pnlDefecto: TPanel;
    lblDeposito: TLabel;
    dblkcbbDeposito: TDBLookupComboBox;
    dsDepositos: TDataSource;
    procedure imgMenuClick(Sender: TObject);
    procedure SVClosed(Sender: TObject);
    procedure catMenuItemsCategoryCollapase(Sender: TObject;
      const Category: TButtonCategory);
    procedure SVOpening(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure btnCancelarApacienciaClick(Sender: TObject);
    procedure btnAceptarApacienciaClick(Sender: TObject);
    procedure btnPathClick(Sender: TObject);
    procedure actAparienciaExecute(Sender: TObject);
    procedure actCopiaSegExecute(Sender: TObject);
    procedure actImpExecute(Sender: TObject);
    procedure actFactExecute(Sender: TObject);
    procedure cbbAparienciaChange(Sender: TObject);
    procedure btnAceptarFactClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnAceptarCopiaSegClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmConfiguracion: TfrmConfiguracion;

implementation

uses
  udmGestion;


{$R *.dfm}

procedure TfrmConfiguracion.actAparienciaExecute(Sender: TObject);    //cambio el panel
begin
  inherited;
  pnlApariencia.Visible := True;
  pnlCopiaSeg.Visible := False;
  pnlImpre.Visible:= False;
  pnlFact.Visible:= False;
  pnlDefecto.Visible := False;
end;

procedure TfrmConfiguracion.actCopiaSegExecute(Sender: TObject);   //cambio el panel, creo carpeta DB default y cargo config
var
  Ini : TIniFile;
begin
  inherited;
  pnlCopiaSeg.Visible := True;
  pnlApariencia.Visible := False;
  pnlImpre.Visible:= False;
  pnlFact.Visible:= False;
  pnlDefecto.Visible := False;
  if not DirectoryExists(TPath.GetDocumentsPath + PathDelim + 'Gestion' + PathDelim + 'Base de datos') then
     CreateDir(TPath.GetDocumentsPath + PathDelim + 'Gestion' + PathDelim + 'Base de datos');

  Ini := Tinifile.Create(dmGestion.CarpetaGestion_IniPath);
  try
    case Ini.ReadBool('Copia de seguridad','Automatica', chkAutmatica.Checked = False) of
      True : chkAutmatica.Checked := True;
      False: chkAutmatica.Checked := False;
    end;
    seDias.Value := Ini.ReadInteger('Copia de seguridad','Intervalo', 0);
    edtPath.Text := Ini.ReadString('Copia de seguridad', 'Path', '');
  finally
    Ini.Free;
  end;
end;

procedure TfrmConfiguracion.actFactExecute(Sender: TObject);  //cambio el panel y cargo sucursal default
var
  Ini : TIniFile;
  IdSucurDefault, IdDepoDefault : Integer;
begin
  inherited;
  pnlFact.Visible:= True;
  pnlImpre.Visible:= False;
  pnlCopiaSeg.Visible := False;
  pnlApariencia.Visible := False;
  pnlDefecto.Visible := False;

  Ini := Tinifile.Create(dmGestion.CarpetaGestion_IniPath);
  try
    IdSucurDefault := Ini.ReadInteger('Sucursal','ID', 1); //carga la sucursal del archivo INI y por defecto carga la 1
    dblkcbbSucursal.KeyValue := IdSucurDefault;
    IdDepoDefault := Ini.ReadInteger('Deposito', 'Numero', 1);  //carga el deposito del archivo ini y por defecto carga 1
    dblkcbbDeposito.KeyValue := IdDepoDefault;
  finally
    Ini.Free;
  end;
end;

procedure TfrmConfiguracion.actImpExecute(Sender: TObject);  //cambio el panel
begin
  inherited;
  pnlImpre.Visible:= True;
  pnlFact.Visible:= False;
  pnlCopiaSeg.Visible := False;
  pnlApariencia.Visible := False;
  pnlDefecto.Visible := False;
end;

procedure TfrmConfiguracion.btnAceptarApacienciaClick(Sender: TObject); //guardo el estilo en el archivo ini
 var
  Ini : TIniFile;
begin
  inherited;
  Ini := Tinifile.Create(dmGestion.CarpetaGestion_IniPath);
  try
    Ini.WriteString('Estilo','Nombre', cbbApariencia.Text);
  finally
    Ini.Free;
  end;
  Close;
end;

procedure TfrmConfiguracion.btnAceptarCopiaSegClick(Sender: TObject);  //guardo la configuracion del back-up en el archivo ini
 var
  Ini : TIniFile;
begin
  inherited;
  Ini := Tinifile.Create(dmGestion.CarpetaGestion_IniPath);
  try
    ini.WriteBool('Copia de seguridad','Automatica', chkAutmatica.Checked);
    Ini.WriteInteger('Copia de seguridad','Intervalo', seDias.Value);
    Ini.WriteString('Copia de seguridad', 'Path', edtPath.Text);
  finally
    Ini.Free;
  end;
  Close;
end;

procedure TfrmConfiguracion.btnCancelarApacienciaClick(Sender: TObject);
begin
  inherited;
  Close;
end;

procedure TfrmConfiguracion.btnAceptarFactClick(Sender: TObject); //guardo datos de la sucursal y el deposito "default"
 var
  Ini : TIniFile;
begin
  inherited;
  Ini := Tinifile.Create(dmGestion.CarpetaGestion_IniPath);
  try
     with dmGestion do
      begin
        if (dblkcbbSucursal.KeyValue <> null) and (dblkcbbSucursal.KeyValue <> null) then
          begin
            Ini.WriteInteger('Sucursal','ID', intgrfldSucursalesID_SUCURSAL.Value);
            Ini.WriteString('Sucursal', 'Nombre comercial', strngfldSucursalesNOMBRE_COMERCIAL.Value);
            Ini.WriteInteger('Deposito', 'Numero', intgrfldDepositosNUMERO.Value);
            Ini.WriteString('Deposito', 'Nombre', strngfldDepositosNOMBRE.Value);
          end;
      end;
  finally
    Ini.Free;
  end;
  Close;
end;

procedure TfrmConfiguracion.btnPathClick(Sender: TObject); // abre el cuadro de dialogo de windows para seleccionar una carpeta, si el windows es mas viejo que winvista, usa el default de delphi.
 var
  Carpeta, PathDefault: string;
  Ini : TIniFile;
begin
  inherited;
  if Win32MajorVersion >= 6 then
    with TFileOpenDialog.Create(nil) do
      try
        Title := 'Seleccione la carpeta destino';
        Options := [fdoPickFolders, fdoPathMustExist, fdoForceFileSystem]; // YMMV
        OkButtonLabel := 'Seleccionar';

        Ini := Tinifile.Create(dmGestion.CarpetaGestion_IniPath);        //leo el path del archivo ini o uso el defecto
        try
          PathDefault := Ini.ReadString('Copia de seguridad', 'Path', '');
          if PathDefault <> '' then
             DefaultFolder := PathDefault
          else
             DefaultFolder := TPath.GetDocumentsPath + PathDelim + 'Gestion' + PathDelim + 'Base de datos';
        finally
          Ini.Free;
        end;

       // FileName := Carpeta;
        if Execute then
           edtPath.Text := FileName;
      finally
        Free;
      end
  else
    if SelectDirectory('Seleccione la carpeta destino', ExtractFileDrive(Carpeta), Carpeta,[sdNewUI, sdNewFolder]) then
       edtPath.Text := Carpeta;
end;

procedure TfrmConfiguracion.catMenuItemsCategoryCollapase(Sender: TObject;
  const Category: TButtonCategory);            // las cat del menu no se cierran
begin
  inherited;
  catMenuItems.Categories[0].Collapsed := False;
end;

procedure TfrmConfiguracion.cbbAparienciaChange(Sender: TObject);      //aplico estilos
begin
  inherited;
   TStyleManager.SetStyle(cbbApariencia.Text);
end;

procedure TfrmConfiguracion.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  inherited;
  dsSucursales.DataSet.Close;
  dsDepositos.DataSet.Close;
end;

procedure TfrmConfiguracion.FormCreate(Sender: TObject);   //  cargo el combobox con los estilos
 var
  StyleName: string;
begin
  inherited;
  for StyleName in TStyleManager.StyleNames do
      cbbApariencia.Items.Add(StyleName);
  cbbApariencia.ItemIndex := cbbApariencia.Items.IndexOf(TStyleManager.ActiveStyle.Name);
end;

procedure TfrmConfiguracion.FormShow(Sender: TObject);  //cargo la grilla con datos de muestra
begin
  inherited;
  dsSucursales.DataSet.Open;
  strngrdMuestra.Cells[0,0]:= 'Cliente';
  strngrdMuestra.Cells[0,1]:= 'Microsoft';
  strngrdMuestra.Cells[0,2]:= 'Apple';
  strngrdMuestra.Cells[0,3]:= 'Oracle';
  strngrdMuestra.Cells[1,0]:= 'Símbolo';
  strngrdMuestra.Cells[1,1]:= 'Ventana';
  strngrdMuestra.Cells[1,2]:= 'Manzana';
  strngrdMuestra.Cells[1,3]:= 'DB';
  strngrdMuestra.Cells[2,0]:= 'Telefono';
  strngrdMuestra.Cells[2,1]:= '011-3456';
  strngrdMuestra.Cells[2,2]:= '023-4874';
  strngrdMuestra.Cells[2,3]:= '184-1568';
  strngrdMuestra.Cells[3,0]:= 'Saldo';
  strngrdMuestra.Cells[3,1]:= '$40,23';
  strngrdMuestra.Cells[3,2]:= '$27,19';
  strngrdMuestra.Cells[3,3]:= '$51,75';
end;

procedure TfrmConfiguracion.imgMenuClick(Sender: TObject); //movimientos del menu
begin
  inherited;
  if SV.Opened then
     SV.Close
  else
     SV.Open;
end;

procedure TfrmConfiguracion.SVClosed(Sender: TObject);  //muestra los iconos despues de cerrar
begin
  inherited;
  catMenuItems.ButtonOptions := catMenuItems.ButtonOptions - [boShowCaptions];
  if SV.CloseStyle = svcCompact then
    catMenuItems.Width := SV.CompactWidth;
end;

procedure TfrmConfiguracion.SVOpening(Sender: TObject);  //muestra los botones despues de abrir el menu
begin
  inherited;
  catMenuItems.ButtonOptions := catMenuItems.ButtonOptions + [boShowCaptions];
  catMenuItems.Width := SV.OpenedWidth;
end;

end.
